00:00 The final thing I want to look at
00:01 is changing our project structure
00:03 a little bit for these shared layouts.
00:05 And you saw just a hint of that
00:07 in our example previously.
00:10 As our application grows
00:12 we're going to want to add more and more structure
00:15 for what we're doing.
00:16 Here's a richer PyPI_webapp.
00:20 This is really where we're going
00:22 this is what we're going to come close
00:23 to ending the course with.
00:25 Notice we have a controllers directory.
00:28 This is where I move the views and I broke them
00:30 into different files.
00:31 So the stuff related to accounting, or creating accounts
00:34 is under account controller.
00:36 This general homepage and stuff is under home
00:39 and then package related things
00:41 like package details and so on
00:43 it's in the the packages controller.
00:45 Because each one of those controller modules
00:48 contains multiple views, it makes a lot of sense
00:51 to create a sub folder in the templates page
00:55 that maps to that controller.
00:57 So, for example, we're going to come over and say
01:00 have an account folder in templates
01:02 and put all the related views.
01:03 So when we say index, we don't have to say index_account
01:06 and have them all mushed together.
01:08 We also have one for home
01:09 and potentially one for packages and so on.
01:12 Then we have the shared layout that we talked about.
01:15 So shared underscore indicator as well.
01:17 So those two things they definitely
01:19 don't try to request that directly.
01:23 So most of the views are going to use the _layout.
01:26 Not all of them.
01:27 For example maybe we want to add a site map
01:29 and the site map will be generated by one of these
01:32 page templates but obviously it's just going to be
01:34 an XML document.
01:35 It doesn't make sense for it to use it
01:37 but like 95% of the views will use this shared layout
01:41 or some derivative thereof.
