00:00 Now that we've opened this project
00:01 it's right here in our recent projects
00:03 so we'll come back to it.
00:05 Notice also PyCharm says here's an unregistered
00:09 vcs or git root, so we can just add that
00:12 and it'll turn on git integration.
00:14 Notice here we've got our branching and stuff is now detected.
00:17 We won't do anything with that really
00:18 but just typically a good thing to say yes
00:21 add this GitHub root, or this git root, okay.
00:26 So we are ready to do some work here
00:28 because when we created this project with Cookiecutter
00:31 and it asked the question
00:33 what template language do you want to use
00:34 and we said I want to use Chameleon
00:37 we have these pt or page templates here.
00:39 If we had chosen Jinja2
00:41 we would have I think it's just .html files
00:46 but inside it's Jinja2.
00:47 And Mako, I think there is mk or mak
00:51 Anyway you'll see different extensions here.
00:53 So first of all, there are actually two layouts here
00:56 but in the views, there is only one view
00:59 what's the deal?
01:01 You notice we are actually pointing at this view.
01:04 And the layout, this is not full html, but it's seeing
01:09 there is a wrapper, standardized html
01:12 that is used for the whole site called layout
01:14 which has all of our doctype, html, etc.
01:19 on there, so we will come back to that later
01:21 but here's the contents of the page
01:23 that we want to work with, there's Pyramid
01:25 our application that was generated by Cookiecutter.
01:28 So what I want to do, I want to take data passed
01:31 in here and render it.
01:34 So let's just go and we'll
01:35 place this little h1 part, we'll just say this will be
01:39 some packages and we are going to pass
01:42 in some fake package data.
01:45 And I just put a div, and I'll say todo put packages here.
01:52 Okay, great, so let's start by looking at the view
01:55 I want to pass little data here
01:56 I mean this is mostly about the templates
01:58 but the templates are not interesting without data.
02:01 So let's go over to our view, and instead of calling it this
02:05 which drives me crazy, let's call it maybe home_index
02:07 or just index or something like this.
02:10 I'll give you the same thing here
02:12 this could just be home_index.
02:17 We can rename that here, but rename is under refactor
02:20 so we'll just call it home_index.
02:24 There we go, okay so you can sort
02:27 of see the tying together of all these here.
02:30 So right now we are passing projects
02:32 which wasn't actually used in the template
02:34 and we are going to pass something more aggressive.
02:37 Let's call this packages and let's put some data here.
02:42 And I could just type it in, right, I can just put in
02:46 package 1 package 2
02:49 and so on but let's give this a little sense
02:51 of some kind of data driven access here
02:54 cuz that's where we are going and we are going to do
02:56 this out of the database, right, this data would not
02:58 come from being hardcoded, that would be silly.
03:01 So maybe just for now, I'll write a function
03:02 up here that says get_test_packages.
03:06 It can return out list. Within this list
03:09 we are going to have some dictionaries.
03:11 And each dictionary represents the data of a package
03:14 that will have a name and a version.
03:17 Okay, so we will come down here and we will say
03:19 name: something and
03:22 version: something else
03:25 and we want to have let's say 3 of those.
03:28 So to have requests, I common
03:32 I'll say 1.2.3
03:35 SQLAlchemy 2.0.0
03:39 and Pyramid
03:40 I think that's 1.9.1 or something like that.
03:43 So down here we can just say this going to be just get
03:46 test packages for our data.
03:48 So this thing we are going to be able to refer to
03:50 remember stuff within the { } is going back
03:53 to the template, that right there is our model
03:54 we can access its keys
03:58 just by saying the name inside the template.
04:01 So let's go down here, and I'll just say for now
04:04 the packages are, and I want to print them out
04:09 so I can just say $packages like that
04:11 and it will pull that array, and print it
04:13 it's not going to look like what we want
04:15 but it will do it. So let's see what we get
04:17 when we run that.
04:23 So there we go, todo put some packages
04:25 whoa, there is a big fat list right there
04:27 but it's working right, pretty cool.
04:31 So what we want to do, not, let's not do this
04:33 we actually want to loop over those and print out requests
04:37 is this version SQLAlchemy is that version and so on.
04:41 So let's go change this, so we will replicate this div.
04:44 We'll give it a class package, something like that.
04:48 We want to replicate that for each one of the packages
04:51 so we are going to say tal and then Chamelon
04:54 tal is Template Attribute Language
04:56 so tal: I noticed the sweet, sweet integration
05:00 of PyCharm here.
05:02 I type tal and it tells me all the things I can do.
05:04 I can repeat, so I want to say p packages.
05:08 This is like for p in packages.
05:11 You drop the for, you drop the in
05:13 I kind of wish they kept it for historical reasons
05:15 it didn't originate with Python, I don't think
05:18 so that is why it is like this.
05:20 So anyway what I want to do, I want put a little span
05:23 and maybe as a class title and then here
05:27 I want to print out just
05:29 p.name if we look over here name
05:35 and then let's do one that will be version
05:39 and this will be p.version.
05:41 So notice, we are defining a local variable
05:43 within this block by looping over it
05:46 and then referring to it here.
05:47 And now I can save, I don't have to rerun this code
05:50 just save it and the templates will automatically
05:52 be reloaded.
05:55 So now, look at that, boom, requests
05:57 SQLAlchemy, Pyramid, we can even do a little test
06:01 we can say tal:condition p.version and only show
06:06 the version section if it is like that.
06:09 I can do like a say not let's just say
06:16 3 zeros if it's not there.
06:17 So let's remove this version from one of them.
06:20 Yeah, okay, so notice it shows the versions
06:24 when it's there, but Pyramid had none
06:25 so we determined that, so we just said 0.0.0
06:28 as our default.
06:30 You may have noticed one thing that I was rerunning
06:33 I was rerunning our app here
06:36 I said you didn't have to do that before.
06:38 When you change the templates, there's no need to rerun it.
06:40 But the Python code, however
06:42 if I change this to 1.7.7
06:46 and I save but I do not rerun
06:50 notice that it is still like this.
06:51 So we have to restart the Python bits, if those change
06:55 now they did
06:57 but the templates are automatically
06:58 just reloaded every time.
07:00 So there we have it, a real, real simple bit of code
07:04 we were able to go and pass some data
07:08 and form a model
07:11 which itself was a list of dictionaries.
07:13 It doesn't actually have to be dictionaries at that level.
07:15 Like the list could be database objects
07:17 but it happened to be dictionaries.
07:19 So we passed those back and then we used tal:repeat.
07:24 We used the string print operator and we used tal:condition
07:29 on version to print out either the version
07:31 or if it was missing we defaulted it just triple zeros.
07:35 One final thing to look at before we move on
07:38 let's look at the raw html that was created by this.
07:42 Okay, you'll see it's really super nice and clean.
07:45 We come over here and do a quick view source.
07:49 There is a bunch of stuff that is put out by the layout.
07:50 We will talk about that later.
07:52 But this bit right here, where it says content.
07:54 That is from our template that we just worked on.
07:57 Notice we wrote h1 some packages, and we said
08:01 div here is the class package and this
08:03 this one right here, that is the one
08:07 that one is the one that has
08:08 tal:repeat on it so right that is this.
08:13 So it has tal:repeat but it is just that block of html
08:17 replicated over and over and then we have this span
08:20 with the title, raw text in there.
08:23 And then the span, this one has the tal:condition
08:26 and it just drops it out, right?
08:28 Either shows one bit or the other, it doesn't
08:31 actually show you any of that stuff.
08:33 So you can see the html that comes out is as clean
08:37 as you are willing to write it.
08:38 It's pristine html, very light weight, really nice.
