00:00 Let's review this concept
00:01 of having just one source of data
00:03 rather than four or five being passed in
00:05 from these different sources on request.
00:08 So we saw that if we just create just a few lines of code
00:11 the simple create function that takes your request
00:14 and returns this thing we created
00:15 called a request dictionary
00:17 which is really a fancy dictionary
00:19 that lets you do sort of arbitrary dynamic access
00:22 into its keys as if they were fields or attributes
00:25 rather than dictionary style with .get
00:28 or square brackets and things like that.
00:30 Then what we're going to do is we're going to
00:32 pass in the request and we're going to say
00:33 "Let's go and get the query string
00:35 and the headers and the Post and the matchdict
00:38 and all of that stuff and merge it
00:39 into one super dictionary."
00:41 And if there's data that is in both
00:43 like say in the matchdict and the Get
00:46 the last one wins.
00:47 So in this case anything in matchdict
00:49 is going to override anything in the query string.
00:52 And then if we just use this in our action methods
00:55 it gets so much simpler.
00:56 So over here in our registered post
00:59 we say create us one of these dictionaries
01:01 when we say d.email_address d.password
01:03 where email_address and password
01:06 these were the named input elements in our form.
01:10 This is certainly an optional design pattern
01:12 but it's very very useful to help just centralize
01:16 where all this data is coming from.
